M2M_tsPacote            sPacoteBEL;

typedef enum {

  etmSOH = bSOH,  //Pacote de dados.
  etmSTX = bSTX,  //Pacote com mensagem para o operador.
  etmACK = bACK,  //Pacote de reconhecimento.
  etmBEL = bBEL,  //Pacote de presença.
  etmNAK = bNAK,  //Pacote de recusa.
  etmFFF = 0x7FFF //Para garantir o tamanho Word.
} M2M_teTipoPac;

//Estrutura para identificação de CBA de origem ou destino de pacote:
typedef struct {
  INT32U            dAddHi;         //Endereço do módulo tem 8 bytes!
  INT32U            dAddLo;         //ATENÇÃO: BIG ENDIAN!!!!
  INT8U             abCodVeic[6];   //Código do veículo.
  INT8U             abIdCBA[6];     //ID-CBA - número de série de hardware.
  INT16U            wAplicacaoID;   //Aplicação do veiculo acima.
  INT8U             bVersaoFW;      //Versão de firmware do m2m
  AUT_teEstadoAuto  eEstadoCEC;     //Estado do CEC
  INT8U             bEstadoCiclo;   //Numero do estado do ciclo automatico
  AQR_teEventosCAN  eEstadoMaquina; //Estado da maquina. Produzindo, manobrando, parado etc.
} M2M_tsId;

//Estrutura para identificação de CBA com posição:
typedef struct {

  M2M_tsId      sId;            //Identificação do CBA.
  INT32U        dDataHora;      //Data/hora de sistema.
  FP64          gLatitude;      //Latitude no início do registro.
  FP64          gLongitude;     //Longitude no início do registro.
  INT32U        dVel;           //Módulo da velocidade
  INT32S        dLatitudeRef;   //Latitude em relação a sua referência
  INT32S        dLongitudeRef;  //Longitude em relação a sua referência
  INT32S        dHeading;       //Direção
  INT32U        dTamanho;       //Tamanho do veiculo (mm)
  INT8U         bNrImplementos; //Numero de implementos ligado.
  INT8U         abReservado[3]; //Para uso futuro.
} M2M_tsIdPos;

//Estrutura de um pacote de identificação de CBA (BEL):
typedef struct {

  //Este é um pacote para broadcast, sem destino específico.
  M2M_tsIdPos       sIdPos;         //Identificação com posição.
  INT8U             abMotorista[12];//Identificação do operador.

} M2M_tsPacoteBEL;

//Estrutura comum à todos os pacotes:
typedef struct {

  M2M_teTipoPac         eTipoPac;       //Tipo do pacote.
  INT16U                wNumSerie;      //Número de série do pacote.
  union {
    M2M_tsPacoteSOH     sSOH;           //Pacote de dados.
    M2M_tsPacoteSTX     sSTX;           //Pacote de dados.
    M2M_tsPacoteACK     sACK;           //Pacote de reconhecimento.
    M2M_tsPacoteBEL     sBEL;           //Pacote de presença.
    M2M_tsPacoteNAK     sNAK;           //Pacote de recusa.
  };

} M2M_tsPacote;

